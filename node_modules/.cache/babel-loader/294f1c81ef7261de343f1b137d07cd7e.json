{"ast":null,"code":"import _slicedToArray from\"/Users/JulianDomke/dev_projects/crm-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useState,useEffect}from'react';import{useDispatch,useSelector}from'react-redux';import{setCurrentPlaytimeAction}from'../redux/actions';var ContentPlayer=function ContentPlayer(){var dispatch=useDispatch();var waveformContainer=useRef({});var audioEl=useRef({});var currentTrack=useSelector(function(state){return state.currentTrack;});var currentPlaytime=useSelector(function(state){return state.currentPlaytime||0;});var _useState=useState(false),_useState2=_slicedToArray(_useState,2),audioPlaying=_useState2[0],setAudioPlaying=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),audioLoaded=_useState4[0],setAudioLoaded=_useState4[1];// Change Playtime based on wave indicator\nuseEffect(function(){var audio=audioEl.current;// Set set Audio Playback Time based on waveform indicator\nif(audio&&currentTrack){audio.currentTime=currentTrack.fullDuration*(currentPlaytime/100)/1000;}},[currentPlaytime,audioEl,currentTrack]);// Setup a listener to reset audio el when finished, and to set Playing Flag to true\nuseEffect(function(){var audio=audioEl.current;if(audio&&currentTrack){audio.addEventListener('ended',function(){audio.pause();audio.currentTime=0;});audio.addEventListener('play',function(){setAudioPlaying(true);});}},[audioEl,currentTrack]);var setPlaybackTime=function setPlaybackTime(e){var rect=waveformContainer.current.getBoundingClientRect();var playPercentage=e.clientX-rect.left;dispatch(setCurrentPlaytimeAction(playPercentage*100/rect.width));};var toggleAudio=function toggleAudio(){var audio=audioEl.current;if(audioPlaying){setAudioPlaying(false);audio.pause();}else{setAudioPlaying(true);audio.play();}};return/*#__PURE__*/React.createElement(\"div\",{id:\"content-player\",className:\"content-player\"},/*#__PURE__*/React.createElement(\"div\",{className:\"content-player-button\"},/*#__PURE__*/React.createElement(\"i\",{onClick:toggleAudio,id:\"audio-play\"// Change logo based on audio playing\n,className:audioPlaying?'far fa-pause-circle fa-2x':'far fa-play-circle fa-2x'}),/*#__PURE__*/React.createElement(\"i\",{onClick:function onClick(){setAudioPlaying(false);audioEl.current.pause();audioEl.current.currentTime=0;},id:\"audio-stop\",className:\"far fa-stop-circle fa-2x\"// change logo based on audio playing, too!\n,style:audioPlaying?{color:'var(--color-text)'}:{color:'var(--color-light)'}})),currentTrack&&/*#__PURE__*/React.createElement(\"div\",{onClick:setPlaybackTime,className:\"content-waveform-container\",ref:waveformContainer},/*#__PURE__*/React.createElement(\"img\",{class:\"content-waveform\",src:currentTrack.waveformPreview,alt:\"waveform\",style:{clipPath:\"inset(0 0 0 \".concat(currentPlaytime,\"%)\")}}),/*#__PURE__*/React.createElement(\"img\",{class:\"content-waveform-overlay\",src:currentTrack.waveformPreview,alt:\"\"// This will color the waveform (basically)\n,style:{clipPath:\"inset(0 \".concat(100-currentPlaytime,\"% 0 0)\")}}),/*#__PURE__*/React.createElement(\"audio\",{autoplay:\"true\",src:currentTrack.fullLengthPreview,ref:audioEl})));};export default ContentPlayer;","map":{"version":3,"sources":["/Users/JulianDomke/dev_projects/crm-react/src/Components/ContentPlayer.js"],"names":["React","useRef","useState","useEffect","useDispatch","useSelector","setCurrentPlaytimeAction","ContentPlayer","dispatch","waveformContainer","audioEl","currentTrack","state","currentPlaytime","audioPlaying","setAudioPlaying","audioLoaded","setAudioLoaded","audio","current","currentTime","fullDuration","addEventListener","pause","setPlaybackTime","e","rect","getBoundingClientRect","playPercentage","clientX","left","width","toggleAudio","play","color","waveformPreview","clipPath","fullLengthPreview"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentPlaytimeAction } from '../redux/actions';\n\nconst ContentPlayer = () => {\n    const dispatch = useDispatch();\n    const waveformContainer = useRef({});\n    const audioEl = useRef({});\n    const currentTrack = useSelector(state => state.currentTrack);\n    const currentPlaytime = useSelector(state => state.currentPlaytime || 0);\n    const [audioPlaying, setAudioPlaying] = useState(false);\n    const [audioLoaded, setAudioLoaded] = useState(false);\n\n    // Change Playtime based on wave indicator\n    useEffect(() => {\n        const audio = audioEl.current;\n\n        // Set set Audio Playback Time based on waveform indicator\n        if (audio && currentTrack) {\n            audio.currentTime =\n                (currentTrack.fullDuration * (currentPlaytime / 100)) / 1000;\n        }\n    }, [currentPlaytime, audioEl, currentTrack]);\n\n    // Setup a listener to reset audio el when finished, and to set Playing Flag to true\n    useEffect(() => {\n        const audio = audioEl.current;\n\n        if (audio && currentTrack) {\n            audio.addEventListener('ended', () => {\n                audio.pause();\n                audio.currentTime = 0;\n            });\n\n            audio.addEventListener('play', () => {\n                setAudioPlaying(true);\n            });\n        }\n    }, [audioEl, currentTrack]);\n\n    const setPlaybackTime = e => {\n        const rect = waveformContainer.current.getBoundingClientRect();\n        const playPercentage = e.clientX - rect.left;\n\n        dispatch(setCurrentPlaytimeAction((playPercentage * 100) / rect.width));\n    };\n\n    const toggleAudio = () => {\n        const audio = audioEl.current;\n\n        if (audioPlaying) {\n            setAudioPlaying(false);\n            audio.pause();\n        } else {\n            setAudioPlaying(true);\n            audio.play();\n        }\n    };\n\n    return (\n        <div id=\"content-player\" className=\"content-player\">\n            <div className=\"content-player-button\">\n                <i\n                    onClick={toggleAudio}\n                    id=\"audio-play\"\n                    // Change logo based on audio playing\n                    className={\n                        audioPlaying\n                            ? 'far fa-pause-circle fa-2x'\n                            : 'far fa-play-circle fa-2x'\n                    }\n                ></i>\n                <i\n                    onClick={() => {\n                        setAudioPlaying(false);\n                        audioEl.current.pause();\n                        audioEl.current.currentTime = 0;\n                    }}\n                    id=\"audio-stop\"\n                    className=\"far fa-stop-circle fa-2x\"\n                    // change logo based on audio playing, too!\n                    style={\n                        audioPlaying\n                            ? { color: 'var(--color-text)' }\n                            : { color: 'var(--color-light)' }\n                    }\n                ></i>\n            </div>\n            {currentTrack && (\n                <div\n                    onClick={setPlaybackTime}\n                    className=\"content-waveform-container\"\n                    ref={waveformContainer}\n                >\n                    <img\n                        class=\"content-waveform\"\n                        src={currentTrack.waveformPreview}\n                        alt=\"waveform\"\n                        style={{\n                            clipPath: `inset(0 0 0 ${currentPlaytime}%)`,\n                        }}\n                    />\n                    <img\n                        class=\"content-waveform-overlay\"\n                        src={currentTrack.waveformPreview}\n                        alt=\"\"\n                        // This will color the waveform (basically)\n                        style={{\n                            clipPath: `inset(0 ${100 - currentPlaytime}% 0 0)`,\n                        }}\n                    />\n                    <audio\n                        autoplay=\"true\"\n                        src={currentTrack.fullLengthPreview}\n                        ref={audioEl}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ContentPlayer;\n"]},"metadata":{},"sourceType":"module"}