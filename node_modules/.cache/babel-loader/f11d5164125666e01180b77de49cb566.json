{"ast":null,"code":"import _slicedToArray from\"/Users/JulianDomke/dev_projects/crm-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useRef,useEffect,useState}from'react';import{useDispatch,useSelector}from'react-redux';import{setCurrentPlaytimeAction,setCurrentTrackAction}from'../redux/actions';var TrackResult=function TrackResult(_ref){var track=_ref.track;var dispatch=useDispatch();var waveformContainer=useRef(null);var currentPlaytime=useSelector(function(state){return state.currentPlaytime;});var currentTrack=useSelector(function(state){return state.currentTrack||{};});var _useState=useState(0),_useState2=_slicedToArray(_useState,2),inset=_useState2[0],setInset=_useState2[1];useEffect(function(){// If not the current track, don't highlight.\nif(track.cueID!=currentTrack.cueID){return setInset(0);}// change playback indicator based on playtime\nif(waveformContainer){var rect=waveformContainer.current.getBoundingClientRect();setInset(currentPlaytime);}},[currentTrack,currentPlaytime]);// On Clicking, make this the current track, and set the playtime based on where it is clicked.\nvar changeAudio=function changeAudio(e){var rect=waveformContainer.current.getBoundingClientRect();var playPercentage=e.clientX-rect.left;dispatch(setCurrentTrackAction(track));dispatch(setCurrentPlaytimeAction(playPercentage*100/rect.width));};// Render Track results\nreturn/*#__PURE__*/React.createElement(\"div\",{className:\"content-result\"},/*#__PURE__*/React.createElement(\"div\",{className:\"content-description\"},/*#__PURE__*/React.createElement(\"h3\",null,track.cueName),/*#__PURE__*/React.createElement(\"p\",null,track.albumName)),/*#__PURE__*/React.createElement(\"div\",{onClick:changeAudio,className:\"content-waveform-container\",ref:waveformContainer},/*#__PURE__*/React.createElement(\"img\",{class:\"content-waveform\",src:track.waveformPreview,alt:\"waveform\"// This will color the waveform (basically)\n,style:{clipPath:\"inset(0 0 0 \".concat(inset,\"%)\")}}),/*#__PURE__*/React.createElement(\"img\",{class:\"content-waveform-overlay\",src:track.waveformPreview,alt:\"\",style:{clipPath:\"inset(0 \".concat(100-inset,\"% 0 0)\")}})),/*#__PURE__*/React.createElement(\"p\",{className:\"content-tags\"},track.cueStyles.join(', ')));};export default TrackResult;","map":{"version":3,"sources":["/Users/JulianDomke/dev_projects/crm-react/src/Components/TrackResult.js"],"names":["React","useRef","useEffect","useState","useDispatch","useSelector","setCurrentPlaytimeAction","setCurrentTrackAction","TrackResult","track","dispatch","waveformContainer","currentPlaytime","state","currentTrack","inset","setInset","cueID","rect","current","getBoundingClientRect","changeAudio","e","playPercentage","clientX","left","width","cueName","albumName","waveformPreview","clipPath","cueStyles","join"],"mappings":"gKAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,CAAwBC,SAAxB,CAAmCC,QAAnC,KAAmD,OAAnD,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OACIC,wBADJ,CAEIC,qBAFJ,KAGO,kBAHP,CAMA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAe,IAAZC,CAAAA,KAAY,MAAZA,KAAY,CAC/B,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CACA,GAAMO,CAAAA,iBAAiB,CAAGV,MAAM,CAAC,IAAD,CAAhC,CACA,GAAMW,CAAAA,eAAe,CAAGP,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACD,eAAV,EAAN,CAAnC,CACA,GAAME,CAAAA,YAAY,CAAGT,WAAW,CAAC,SAAAQ,KAAK,QAAIA,CAAAA,KAAK,CAACC,YAAN,EAAsB,EAA1B,EAAN,CAAhC,CAJ+B,cAKLX,QAAQ,CAAC,CAAD,CALH,wCAKxBY,KALwB,eAKjBC,QALiB,eAO/Bd,SAAS,CAAC,UAAM,CACZ;AACA,GAAIO,KAAK,CAACQ,KAAN,EAAeH,YAAY,CAACG,KAAhC,CAAuC,CACnC,MAAOD,CAAAA,QAAQ,CAAC,CAAD,CAAf,CACH,CAED;AACA,GAAIL,iBAAJ,CAAuB,CACnB,GAAMO,CAAAA,IAAI,CAAGP,iBAAiB,CAACQ,OAAlB,CAA0BC,qBAA1B,EAAb,CACAJ,QAAQ,CAACJ,eAAD,CAAR,CACH,CACJ,CAXQ,CAWN,CAACE,YAAD,CAAeF,eAAf,CAXM,CAAT,CAaA;AACA,GAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,CAAC,CAAI,CACrB,GAAMJ,CAAAA,IAAI,CAAGP,iBAAiB,CAACQ,OAAlB,CAA0BC,qBAA1B,EAAb,CACA,GAAMG,CAAAA,cAAc,CAAGD,CAAC,CAACE,OAAF,CAAYN,IAAI,CAACO,IAAxC,CAEAf,QAAQ,CAACH,qBAAqB,CAACE,KAAD,CAAtB,CAAR,CACAC,QAAQ,CAACJ,wBAAwB,CAAEiB,cAAc,CAAG,GAAlB,CAAyBL,IAAI,CAACQ,KAA/B,CAAzB,CAAR,CACH,CAND,CAQA;AACA,mBACI,2BAAK,SAAS,CAAC,gBAAf,eACI,2BAAK,SAAS,CAAC,qBAAf,eACI,8BAAKjB,KAAK,CAACkB,OAAX,CADJ,cAEI,6BAAIlB,KAAK,CAACmB,SAAV,CAFJ,CADJ,cAMI,2BACI,OAAO,CAAEP,WADb,CAEI,SAAS,CAAC,4BAFd,CAGI,GAAG,CAAEV,iBAHT,eAKI,2BACI,KAAK,CAAC,kBADV,CAEI,GAAG,CAAEF,KAAK,CAACoB,eAFf,CAGI,GAAG,CAAC,UACJ;AAJJ,CAKI,KAAK,CAAE,CACHC,QAAQ,uBAAiBf,KAAjB,MADL,CALX,EALJ,cAcI,2BACI,KAAK,CAAC,0BADV,CAEI,GAAG,CAAEN,KAAK,CAACoB,eAFf,CAGI,GAAG,CAAC,EAHR,CAII,KAAK,CAAE,CAAEC,QAAQ,mBAAa,IAAMf,KAAnB,UAAV,CAJX,EAdJ,CANJ,cA2BI,yBAAG,SAAS,CAAC,cAAb,EAA6BN,KAAK,CAACsB,SAAN,CAAgBC,IAAhB,CAAqB,IAArB,CAA7B,CA3BJ,CADJ,CA+BH,CA7DD,CAmEA,cAAexB,CAAAA,WAAf","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    setCurrentPlaytimeAction,\n    setCurrentTrackAction,\n} from '../redux/actions';\nimport PropTypes from 'prop-types';\n\nconst TrackResult = ({ track }) => {\n    const dispatch = useDispatch();\n    const waveformContainer = useRef(null);\n    const currentPlaytime = useSelector(state => state.currentPlaytime);\n    const currentTrack = useSelector(state => state.currentTrack || {});\n    const [inset, setInset] = useState(0);\n\n    useEffect(() => {\n        // If not the current track, don't highlight.\n        if (track.cueID != currentTrack.cueID) {\n            return setInset(0);\n        }\n\n        // change playback indicator based on playtime\n        if (waveformContainer) {\n            const rect = waveformContainer.current.getBoundingClientRect();\n            setInset(currentPlaytime);\n        }\n    }, [currentTrack, currentPlaytime]);\n\n    // On Clicking, make this the current track, and set the playtime based on where it is clicked.\n    const changeAudio = e => {\n        const rect = waveformContainer.current.getBoundingClientRect();\n        const playPercentage = e.clientX - rect.left;\n\n        dispatch(setCurrentTrackAction(track));\n        dispatch(setCurrentPlaytimeAction((playPercentage * 100) / rect.width));\n    };\n\n    // Render Track results\n    return (\n        <div className=\"content-result\">\n            <div className=\"content-description\">\n                <h3>{track.cueName}</h3>\n                <p>{track.albumName}</p>\n            </div>\n\n            <div\n                onClick={changeAudio}\n                className=\"content-waveform-container\"\n                ref={waveformContainer}\n            >\n                <img\n                    class=\"content-waveform\"\n                    src={track.waveformPreview}\n                    alt=\"waveform\"\n                    // This will color the waveform (basically)\n                    style={{\n                        clipPath: `inset(0 0 0 ${inset}%)`,\n                    }}\n                />\n                <img\n                    class=\"content-waveform-overlay\"\n                    src={track.waveformPreview}\n                    alt=\"\"\n                    style={{ clipPath: `inset(0 ${100 - inset}% 0 0)` }}\n                />\n            </div>\n            <p className=\"content-tags\">{track.cueStyles.join(', ')}</p>\n        </div>\n    );\n};\n\nTrackResult.propTypes = {\n    track: PropTypes.object.isRequired,\n};\n\nexport default TrackResult;\n"]},"metadata":{},"sourceType":"module"}