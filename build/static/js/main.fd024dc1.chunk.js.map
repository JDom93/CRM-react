{"version":3,"sources":["redux/actions.js","Components/SearchSuggestions.js","Components/SearchContainer.js","Components/TrackResult.js","Components/ContentResults.js","Components/ContentPlayer.js","Components/ContentContainer.js","App.js","redux/reducer.js","index.js"],"names":["setCurrentPlaytimeAction","currentPlaytime","type","SearchSuggestions","filters","findMusic","setQuery","console","log","Alben","Instrument","Keyword","ProductionType","Style","id","className","length","slice","map","keyword","key","onClick","e","target","textContent","album","inst","style","prod","SearchContainer","dispatch","useDispatch","useState","query","setFilters","multilayer","setMultilayer","useEffect","ignore","a","axios","get","data","getFilters","filterItem","preventDefault","lastResponse","onSubmit","autocomplete","value","onChange","for","name","mutliLayerFlag","checked","TrackResult","track","waveformContainer","useRef","useSelector","state","currentTrack","inset","setInset","cueID","current","getBoundingClientRect","cueName","albumName","rect","playPercentage","clientX","left","setCurrentTrackAction","width","ref","class","src","waveformPreview","alt","clipPath","cueStyles","join","ContentResults","cueData","response","cueIds","searchCueIDs","tracks","setTracks","currentTracks","cueId","ContentPlayer","audioEl","audioPlaying","setAudioPlaying","audio","currentTime","fullDuration","addEventListener","pause","play","color","autoplay","fullLengthPreview","ContentContainer","store","createStore","action","Object","assign","composeWithDevTools","applyMiddleware","reduxPromise","App","then","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fd024dc1.chunk.js","sourcesContent":["export function storeResponseAction(lastResponse) {\n    const type = 'STORE_RESPONSE';\n\n    return {\n        type,\n        lastResponse,\n    };\n}\n\nexport function setCurrentTrackAction(currentTrack) {\n    const type = 'SET_CURRENT_TRACK';\n\n    return {\n        type,\n        currentTrack,\n    };\n}\n\nexport function setCurrentPlaytimeAction(currentPlaytime) {\n    const type = 'SET_CURRENT_PLAYTIME';\n\n    return {\n        type,\n        currentPlaytime,\n    };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchSuggestions = ({ filters, findMusic, setQuery }) => {\n    if (!filters) {\n        console.log('no filters');\n        return null;\n    }\n\n    const { Alben, Instrument, Keyword, ProductionType, Style } = filters;\n\n    // Only display fields if there are suggestions present\n    // Limited to 15 items per filter\n    return (\n        <div id=\"suggestions\" className=\"search-suggestions\">\n            {/* Alben */}\n            {Keyword && Keyword.length != 0 && (\n                <div className=\"suggestion\" id=\"keywords\">\n                    <h3>Keywords</h3>\n                    <ul id=\"list-keywords\">\n                        {Keyword.slice(0, 15).map(keyword => (\n                            <li\n                                className=\"suggestion-item\"\n                                key={keyword}\n                                onClick={e => {\n                                    findMusic(e, e.target.textContent);\n                                    setQuery(e.target.textContent);\n                                }}\n                            >\n                                {keyword}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n            {/* Albums */}\n            {Alben && Alben.length != 0 && (\n                <div className=\"suggestion\" id=\"albums\">\n                    <h3>Albums</h3>\n                    <ul id=\"list-albums\">\n                        {Alben.slice(0, 15).map(album => (\n                            <li\n                                className=\"suggestion-item\"\n                                key={album}\n                                onClick={e => {\n                                    findMusic(e, e.target.textContent);\n                                    setQuery(e.target.textContent);\n                                }}\n                            >\n                                {album}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n            {/* Instruments */}\n            {Instrument && Instrument.length != 0 && (\n                <div className=\"suggestion\" id=\"instruments\">\n                    <h3>Instruments</h3>\n                    <ul id=\"list-instruments\">\n                        {Instrument.slice(0, 15).map(inst => (\n                            <li\n                                className=\"suggestion-item\"\n                                key={inst}\n                                onClick={e => {\n                                    findMusic(e, e.target.textContent);\n                                    setQuery(e.target.textContent);\n                                }}\n                            >\n                                {inst}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n            {Style && Style.length != 0 && (\n                <div className=\"suggestion\" id=\"styles\">\n                    <h3>Styles</h3>\n                    <ul id=\"list-styles\">\n                        {Style.slice(0, 15).map(style => (\n                            <li\n                                className=\"suggestion-item\"\n                                key={style}\n                                onClick={e => {\n                                    findMusic(e, e.target.textContent);\n                                    setQuery(e.target.textContent);\n                                }}\n                            >\n                                {style}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n            {ProductionType && ProductionType.length != 0 && (\n                <div className=\"suggestion\" id=\"production\">\n                    <h3>Production</h3>\n                    <ul id=\"list-productions\">\n                        {ProductionType.slice(0, 15).map(prod => (\n                            <li\n                                className=\"suggestion-item\"\n                                key={prod}\n                                onClick={e => {\n                                    findMusic(e, e.target.textContent);\n                                    setQuery(e.target.textContent);\n                                }}\n                            >\n                                {prod}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            )}\n        </div>\n    );\n};\n\nSearchSuggestions.propTypes = {\n    Alben: PropTypes.array,\n    Instrument: PropTypes.array,\n    Keyword: PropTypes.array,\n    ProductionType: PropTypes.array,\n    Style: PropTypes.array,\n};\n\nexport default SearchSuggestions;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { storeResponseAction } from '../redux/actions';\nimport SearchSuggestions from './SearchSuggestions';\nimport axios from 'axios';\n\nconst SearchContainer = () => {\n    const dispatch = useDispatch();\n    const [query, setQuery] = useState('');\n    const [filters, setFilters] = useState(null);\n    const [multilayer, setMultilayer] = useState(false);\n\n    useEffect(() => {\n        // Flag for throtteling api requests\n        let ignore = false;\n\n        async function getFilters() {\n            // Don't make a request if there is no query.\n            if (!query) {\n                return;\n            }\n\n            // Get data from API, set to state\n            const {\n                data: { filters },\n            } = await axios.get(\n                `http://api.createmusic.com/search?search=${query}&mutliLayerOnly=${multilayer}`\n            );\n            if (!ignore) {\n                setFilters(filters);\n            }\n        }\n\n        getFilters();\n\n        return () => {\n            // when user types a new letter, ignore the previous request.\n            ignore = true;\n        };\n    }, [query, multilayer]);\n\n    // find music and dispatch it to store\n    const findMusic = async (e, filterItem) => {\n        e.preventDefault();\n\n        // If no filter item is clicked, use the typed-in query\n        if (!filterItem) {\n            filterItem = query;\n        }\n\n        // get Data\n        const { data } = await axios.get(\n            `http://api.createmusic.com/search?search=${filterItem}&mutliLayerOnly=${multilayer}`\n        );\n        if (data) {\n            console.log(data);\n            dispatch(storeResponseAction(data));\n        }\n    };\n\n    return (\n        <aside className=\"container-search\">\n            <div className=\"search-tool\">\n                <h3>Search Music</h3>\n                <form id=\"search-form\" onSubmit={findMusic}>\n                    <input\n                        autocomplete=\"off\"\n                        type=\"text\"\n                        id=\"search-input\"\n                        value={query}\n                        onChange={e => {\n                            setQuery(e.target.value);\n                        }}\n                    />\n                    <label for=\"multilayer\" className=\"checkbox-label\">\n                        <input\n                            type=\"checkbox\"\n                            name=\"multilayer\"\n                            id=\"multilayer\"\n                            onChange={e => {\n                                // Set multilayer flag upon clicking\n                                const mutliLayerFlag = e.target.checked ? 1 : 0;\n                                setMultilayer(mutliLayerFlag);\n                            }}\n                        />\n                        <span className=\"checkbox\"></span>\n                        Multilayer\n                    </label>\n                    {filters && (\n                        <SearchSuggestions\n                            filters={filters}\n                            findMusic={findMusic}\n                            setQuery={setQuery}\n                        />\n                    )}\n                </form>\n            </div>\n        </aside>\n    );\n};\n\nexport default SearchContainer;\n","import React, { useRef, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n    setCurrentPlaytimeAction,\n    setCurrentTrackAction,\n} from '../redux/actions';\nimport PropTypes from 'prop-types';\n\nconst TrackResult = ({ track }) => {\n    const dispatch = useDispatch();\n    const waveformContainer = useRef(null);\n    const currentPlaytime = useSelector(state => state.currentPlaytime);\n    const currentTrack = useSelector(state => state.currentTrack || {});\n    const [inset, setInset] = useState(0);\n\n    useEffect(() => {\n        // If not the current track, don't highlight.\n        if (track.cueID != currentTrack.cueID) {\n            return setInset(0);\n        }\n\n        // change playback indicator based on playtime\n        if (waveformContainer) {\n            const rect = waveformContainer.current.getBoundingClientRect();\n            setInset(currentPlaytime);\n        }\n    }, [currentTrack, currentPlaytime]);\n\n    // On Clicking, make this the current track, and set the playtime based on where it is clicked.\n    const changeAudio = e => {\n        const rect = waveformContainer.current.getBoundingClientRect();\n        const playPercentage = e.clientX - rect.left;\n\n        dispatch(setCurrentTrackAction(track));\n        dispatch(setCurrentPlaytimeAction((playPercentage * 100) / rect.width));\n    };\n\n    // Render Track results\n    return (\n        <div className=\"content-result\">\n            <div className=\"content-description\">\n                <h3>{track.cueName}</h3>\n                <p>{track.albumName}</p>\n            </div>\n\n            <div\n                onClick={changeAudio}\n                className=\"content-waveform-container\"\n                ref={waveformContainer}\n            >\n                <img\n                    class=\"content-waveform\"\n                    src={track.waveformPreview}\n                    alt=\"waveform\"\n                    // This will color the waveform (basically)\n                    style={{\n                        clipPath: `inset(0 0 0 ${inset}%)`,\n                    }}\n                />\n                <img\n                    class=\"content-waveform-overlay\"\n                    src={track.waveformPreview}\n                    alt=\"\"\n                    style={{ clipPath: `inset(0 ${100 - inset}% 0 0)` }}\n                />\n            </div>\n            <p className=\"content-tags\">{track.cueStyles.join(', ')}</p>\n        </div>\n    );\n};\n\nTrackResult.propTypes = {\n    track: PropTypes.object.isRequired,\n};\n\nexport default TrackResult;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport TrackResult from './TrackResult';\n\nconst ContentResults = () => {\n    const cueData = useSelector(\n        state => state.response && state.response.cueData\n    );\n    const cueIds = useSelector(\n        state => state.response && state.response.searchCueIDs\n    );\n    const [tracks, setTracks] = useState([]);\n\n    // Create 50 results per Query.\n    useEffect(() => {\n        if (cueIds) {\n            const currentTracks = cueIds\n                .slice(0, 50)\n                .map(cueId => cueData[cueId]);\n            setTracks(currentTracks);\n        }\n    }, [cueIds]);\n\n    return (\n        <main id=\"content-results\" className=\"content-results\">\n            {tracks && tracks.map(track => <TrackResult track={track} />)}\n        </main>\n    );\n};\n\nexport default ContentResults;\n","import React, { useRef, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setCurrentPlaytimeAction } from '../redux/actions';\n\nconst ContentPlayer = () => {\n    const dispatch = useDispatch();\n    const waveformContainer = useRef({});\n    const audioEl = useRef({});\n    const currentTrack = useSelector(state => state.currentTrack);\n    const currentPlaytime = useSelector(state => state.currentPlaytime || 0);\n    const [audioPlaying, setAudioPlaying] = useState(false);\n    const [audioLoaded, setAudioLoaded] = useState(false);\n\n    // Change Playtime based on wave indicator\n    useEffect(() => {\n        const audio = audioEl.current;\n\n        // Set set Audio Playback Time based on waveform indicator\n        if (audio && currentTrack) {\n            audio.currentTime =\n                (currentTrack.fullDuration * (currentPlaytime / 100)) / 1000;\n        }\n    }, [currentPlaytime, audioEl, currentTrack]);\n\n    // Setup a listener to reset audio el when finished, and to set Playing Flag to true\n    useEffect(() => {\n        const audio = audioEl.current;\n\n        if (audio && currentTrack) {\n            audio.addEventListener('ended', () => {\n                audio.pause();\n                audio.currentTime = 0;\n            });\n\n            audio.addEventListener('play', () => {\n                setAudioPlaying(true);\n            });\n        }\n    }, [audioEl, currentTrack]);\n\n    const setPlaybackTime = e => {\n        const rect = waveformContainer.current.getBoundingClientRect();\n        const playPercentage = e.clientX - rect.left;\n\n        dispatch(setCurrentPlaytimeAction((playPercentage * 100) / rect.width));\n    };\n\n    const toggleAudio = () => {\n        const audio = audioEl.current;\n\n        if (audioPlaying) {\n            setAudioPlaying(false);\n            audio.pause();\n        } else {\n            setAudioPlaying(true);\n            audio.play();\n        }\n    };\n\n    return (\n        <div id=\"content-player\" className=\"content-player\">\n            <div className=\"content-player-button\">\n                <i\n                    onClick={toggleAudio}\n                    id=\"audio-play\"\n                    // Change logo based on audio playing\n                    className={\n                        audioPlaying\n                            ? 'far fa-pause-circle fa-2x'\n                            : 'far fa-play-circle fa-2x'\n                    }\n                ></i>\n                <i\n                    onClick={() => {\n                        setAudioPlaying(false);\n                        audioEl.current.pause();\n                        audioEl.current.currentTime = 0;\n                    }}\n                    id=\"audio-stop\"\n                    className=\"far fa-stop-circle fa-2x\"\n                    // change logo based on audio playing, too!\n                    style={\n                        audioPlaying\n                            ? { color: 'var(--color-text)' }\n                            : { color: 'var(--color-light)' }\n                    }\n                ></i>\n            </div>\n            {currentTrack && (\n                <div\n                    onClick={setPlaybackTime}\n                    className=\"content-waveform-container\"\n                    ref={waveformContainer}\n                >\n                    <img\n                        class=\"content-waveform\"\n                        src={currentTrack.waveformPreview}\n                        alt=\"waveform\"\n                        style={{\n                            clipPath: `inset(0 0 0 ${currentPlaytime}%)`,\n                        }}\n                    />\n                    <img\n                        class=\"content-waveform-overlay\"\n                        src={currentTrack.waveformPreview}\n                        alt=\"\"\n                        // This will color the waveform (basically)\n                        style={{\n                            clipPath: `inset(0 ${100 - currentPlaytime}% 0 0)`,\n                        }}\n                    />\n                    <audio\n                        autoplay=\"true\"\n                        src={currentTrack.fullLengthPreview}\n                        ref={audioEl}\n                    />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ContentPlayer;\n","import React from 'react';\nimport ContentResults from './ContentResults';\nimport ContentPlayer from './ContentPlayer';\n\nconst ContentContainer = () => {\n    return (\n        <div className=\"container-content\">\n            {/* Nav Bar */}\n            <nav>\n                <div class=\"logo-wrapper\">\n                    <img\n                        className=\"logo-image\"\n                        src=\"https://www.createmusic.com/wp-content/themes/Avada-Child-Theme/images/CM-logo-final-white_wide.svg\"\n                        alt=\"CREATE MUSIC APP\"\n                    />\n                </div>\n                <ul className=\"menu-profile\">\n                    <li id=\"login\">Login</li>\n                    <li id=\"menu\">Menu</li>\n                    <li id=\"icon\">\n                        <i className=\"fas fa-user-circle fa-2x\"></i>\n                    </li>\n                </ul>\n            </nav>\n            {/* Main Container */}\n            <section className=\"content-main\">\n                <header className=\"content-filter\">\n                    <h3>\n                        Search Results <span id=\"num-results\"></span>\n                    </h3>\n                    <ul id=\"content-filters\" className=\"content-filter-list\">\n                        <li className=\"filter-active\" id=\"filter-tracks\">\n                            Tracks\n                        </li>\n                        <li id=\"filter-albums\">Albums</li>\n                        <li id=\"filter-favorites\">Favorites</li>\n                        <li id=\"filter-playlists\">Playlists</li>\n                    </ul>\n                </header>\n                <hr className=\"content-separator\" />\n                {/* Main Container */}\n                <ContentResults />\n                <hr className=\"content-separator\" />\n                {/* Actual Player */}\n                <ContentPlayer />\n            </section>\n        </div>\n    );\n};\n\nexport default ContentContainer;\n","import React from 'react';\nimport SearchContainer from './Components/SearchContainer';\nimport ContentContainer from './Components/ContentContainer';\nimport './style.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reduxPromise from 'redux-promise';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reducer from './redux/reducer';\n\nconst store = createStore(\n    reducer,\n    composeWithDevTools(applyMiddleware(reduxPromise))\n);\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className=\"container-main\">\n                <SearchContainer />\n                <ContentContainer />\n            </div>\n        </Provider>\n    );\n}\nexport default App;\n","export default function (state = {}, action) {\n    if (action.type == 'STORE_RESPONSE') {\n        return Object.assign({}, state, {\n            response: action.lastResponse,\n        });\n    }\n\n    if (action.type == 'SET_CURRENT_TRACK') {\n        return Object.assign({}, state, {\n            currentTrack: action.currentTrack,\n        });\n    }\n\n    if (action.type == 'SET_CURRENT_PLAYTIME') {\n        return Object.assign({}, state, {\n            currentPlaytime: action.currentPlaytime,\n        });\n    }\n\n    return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport axios from 'axios';\n// import * as serviceWorker from './serviceWorker';\n\naxios.get('http://api.createmusic.com/search?search=a').then(({ data }) => {\n    console.log(data);\n});\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}